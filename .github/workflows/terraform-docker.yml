name: "Terraform in Docker"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform-docker:
    name: Terraform
    runs-on: ubuntu-latest
    container: hashicorp/terraform:0.12.23

    env:
      TF_VAR_access_key: ${{ secrets.ZENHUB_AWS_ACCESS_KEY }}
      TF_VAR_secret_key: ${{ secrets.ZENHUB_AWS_SECRET_KEY}}
      TF_VAR_pub_key: ${{ secrets.PUB_KEY }}
      TF_VAR_my_home: ${{ secrets.MY_IP }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

        # continue-on-error: true
      - name: Terraform Validate
        id: validate
        run: terraform validate #-no-color

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=planfile

      - name: Upload planfile
        uses: actions/upload-artifact@v2
        with:
          name: tf-plan
          path: planfile
          retention-days: 1

  updatepr:
    needs: terraform-docker
    name: UpdatePR
    runs-on: ubuntu-latest

    steps:
      - name: Download planfile
        uses: actions/download-artifact@v2
        with:
          name: tf-plan

      - name: Terraform Plan output
        id: planfile
        run: echo ::set-output name=plan::$(cat planfile)

      - name: Update Pull Request
        uses: actions/github-script@v3 #0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.planfile.outputs.plan }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Validate ‚öôÔ∏è\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks


#    - name: Terraform Apply
#      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#      run: terraform apply -auto-approve
